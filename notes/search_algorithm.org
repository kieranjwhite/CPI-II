* Create 50 Batch instances each containing phrases of 1/50 of the queries. 
* for Batch batch: partials:
** foreach batch.query interrogate(QueryPhrases q): doc
*** q.answer(doc)
** Phrases phrases=batch.phrases()
*** foreach batch: doc_id
**** foreach phrases.findIn(doc_id): map phrase -> doc_spans
***** Set<DocResult> results=batch.docResults(doc, phrase); //results is a set of all  results (one per query that contains phrase) that contains doc   
***** foreach results: result  //result contains spans for one or more phrases in the same query + doc title and path
****** foerach doc_spans: span
******* result.addSpan(span) 
*** List<Result> list=completeResults.getAndDelete(q)
*** foreach list: fullResult
**** journal.addNew(fullResult)
*** journal.commit(q.dst())
* Data structures:
** QueryPhrases all phrases in a query
** Set<Integer> doneDocs
** All phrases of concern in current partition
*** Phrases
** Phrase (one phrase in a query)
*** String
** DocSpan, start and end offsets for a match in a document
** Phrases contains all phrases for all queries
** PartialResult: a single document result from a particular query
*** map query -> result_idx -> doc, list<doc_span>
** Partials maps phrase->doc->partial implement as (phrase -> Set<QueryPhrases> queries) and (Set<QueryPhrases> queries -> doc_id) -> partial
*** Batcher
** CompleteResult QueryPhrases -> Array<Result>
** Set<Integer> doneDocs 
* Old
** Foreach query
*** Foreach doc returned
**** For each term in that doc
***** For each span for the doc, term pairs
* New
** N times
*** Foreach query
**** Foreach doc returned
*** Foreach doc returned
**** Foreach term in that doc
***** Foreach span 
****** Foreach phrase at that span

